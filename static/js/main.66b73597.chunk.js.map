{"version":3,"sources":["components/Navbar.tsx","App.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PeopleLink.tsx","types/sortType.ts","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","index.tsx"],"names":["hasActive","isActive","classNames","Navbar","className","role","to","App","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","availableCenturies","PeopleFilters","setSearchParams","query","get","sex","centuries","getAll","length","checkParamsCentury","century","includes","filter","currentCentury","type","placeholder","onChange","e","target","map","Loader","PersonLink","person","name","slug","useLocation","pathname","SortType","PeopleTable","people","slugPerson","useParams","sort","order","currentSortDirection","sortMethod","getPersonName","find","born","died","mother","motherName","father","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeople","catch","finally","normalized","useCallback","currentValue","toLowerCase","trim","visiblePerson","useMemo","temp","toLocaleLowerCase","Math","ceil","firstPerson","secondPerson","localeCompare","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.66b73597.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst hasActive = ({ isActive }:{ isActive: boolean }) => classNames(\n  'navbar-item', {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={hasActive}> Home</NavLink>\n          <NavLink\n            aria-current=\"page\"\n            className={hasActive}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nconst availableCenturies = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  if (availableCenturies.length === centuries.length) {\n    setSearchParams(\n      getSearchWith(\n        searchParams, { centuries: [] },\n      ),\n    );\n  }\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(searchParams, { query: event.target.value || null }),\n    );\n  };\n\n  const checkParamsCentury = (century:string) => {\n    if (centuries.includes(century)) {\n      centuries.filter(currentCentury => currentCentury !== century);\n    }\n\n    return [...centuries, century];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': !sex,\n          })}\n          params={{\n            sex: null,\n          }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === 'm',\n          })}\n          params={{\n            sex: 'm',\n          }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === 'f',\n          })}\n          params={{\n            sex: 'f',\n          }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={(e) => handleQueryChange(e)}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {availableCenturies.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{\n                  centuries: checkParamsCentury(century),\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length !== 0,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { name, sex, slug } = person;\n  const { search } = useLocation();\n\n  return (\n    <Link\n      to={{ pathname: `../${slug}`, search }}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","export enum SortType {\n  sex = 'sex',\n  name = 'name',\n  born = 'born',\n  died = 'died',\n}\n","import { useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PeopleLink';\nimport { SearchLink } from './SearchLink';\nimport { SortType } from '../types/sortType';\n\ntype Props = {\n  people : Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const { slugPerson } = useParams();\n\n  const sort = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const currentSortDirection = (sortMethod: string) => {\n    if (sortMethod !== sort) {\n      return null;\n    }\n\n    if (sortMethod === sort && sortMethod !== order) {\n      return 'desc';\n    }\n\n    return null;\n  };\n\n  const getPersonName = (name: string | null) => {\n    if (!name) {\n      return undefined;\n    }\n\n    return people.find(person => person.name === name);\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink params={{\n                sort: SortType.name && order ? null : SortType.name,\n                order: currentSortDirection(SortType.name),\n              }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas', {\n                    'fa-sort': sort !== SortType.name,\n                    'fa-sort-up': sort === SortType.name && !order,\n                    'fa-sort-down': sort === SortType.name && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink params={{\n                sort: SortType.sex && order ? null : SortType.sex,\n                order: currentSortDirection(SortType.sex),\n              }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas', {\n                    'fa-sort': SortType.sex !== sort,\n                    'fa-sort-up': sort === SortType.sex && !order,\n                    'fa-sort-down': sort === SortType.sex && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink params={{\n                sort: SortType.born && order ? null : SortType.born,\n                order: currentSortDirection(SortType.born),\n              }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas', {\n                    'fa-sort': sort !== SortType.born,\n                    'fa-sort-up': sort === SortType.born && !order,\n                    'fa-sort-down': sort === SortType.born && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink params={{\n                sort: SortType.died && order ? null : SortType.died,\n                order: currentSortDirection(SortType.died),\n              }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas', {\n                    'fa-sort': sort !== SortType.died,\n                    'fa-sort-up': sort === SortType.died && !order,\n                    'fa-sort-down': sort === SortType.died && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const mother = getPersonName(person.motherName);\n          const father = getPersonName(person.fatherName);\n\n          return (\n            <tr\n              key={person.slug}\n              data-cy=\"person\"\n              className={classNames({\n                'has-background-warning': slugPerson === person.slug,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td>\n                {mother\n                  ? <PersonLink person={mother} />\n                  : person.motherName || <span>-</span> }\n              </td>\n              <td>\n                {father\n                  ? <PersonLink person={father} />\n                  : person.fatherName || <span>-</span> }\n              </td>\n            </tr>\n          );\n        })}\n\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { SortType } from '../types/sortType';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const query = searchParams.get('query') || null;\n  const sex = searchParams.get('sex') || null;\n  const centuries = searchParams.getAll('centuries') || [];\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const normalized = useCallback((currentValue: string) => {\n    return currentValue.toLowerCase().trim();\n  }, []);\n\n  const visiblePerson = useMemo(() => {\n    let temp = people.map(person => ({\n      ...person,\n      mother: people.find(mother => mother.name === person.motherName) || null,\n      father: people.find(father => father.name === person.fatherName) || null,\n    }));\n\n    if (query) {\n      temp = temp.filter(person => (\n        normalized(person.name).includes(normalized(query))\n        || person.fatherName?.toLocaleLowerCase()\n          .trim().includes(normalized(query))\n        || person.motherName?.toLocaleLowerCase()\n          .trim().includes(normalized(query))\n      )) || null;\n    }\n\n    if (centuries.length !== 0) {\n      temp = temp.filter(person => (\n        centuries.includes(Math.ceil(person.born / 100).toString())\n      ));\n    }\n\n    if (sex) {\n      temp = temp.filter(person => (\n        person.sex === sex\n      ));\n    }\n\n    if (sort) {\n      temp.sort((firstPerson, secondPerson) => {\n        switch (sort) {\n          case SortType.name:\n          case SortType.sex:\n            return order !== 'desc'\n              ? firstPerson[sort].localeCompare(secondPerson[sort])\n              : secondPerson[sort].localeCompare(firstPerson[sort]);\n          case SortType.born:\n          case SortType.died:\n            return order !== 'desc'\n              ? firstPerson[sort] - secondPerson[sort]\n              : secondPerson[sort] - firstPerson[sort];\n          default:\n            return 0;\n        }\n      });\n    }\n\n    return temp;\n  }, [people, query, centuries, sex, order]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n\n              {!isLoading && !isError && visiblePerson.length === 0 && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              <p>There are no people matching the current search criteria</p>\n\n              {!isLoading && visiblePerson.length > 0 && (\n                <PeopleTable people={visiblePerson} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\n\nconst Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<h1 className=\"title\">Home Page</h1>} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\">\n          <Route path=\":slugPerson?\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n      </Route>\n    </Routes>\n    <App />\n  </Router>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}